# Makefile.mcp - Reglas adicionales para MCP
# Este archivo se incluye en el Makefile principal

# Directorio de salida (debe coincidir con Makefile principal)
OUT_DIR = out

# Variables espec√≠ficas para MCP
MCP_BRIDGE = MCPBridge
MCP_BRIDGE_NATIVE = $(OUT_DIR)/MCPBridge_native
MCP_CLIENT_SRCS = mcp_client.c
MAIN_MCP = main_mcp.c

# Crear directorio de salida si no existe
$(OUT_DIR):
	@mkdir -p $(OUT_DIR)

# Compilar el bridge nativo
build_mcp_bridge: $(OUT_DIR)
	@echo "üî® Compilando MCP Bridge nativo..."
	@if [ ! -f $(MCP_BRIDGE).csproj ]; then \
		echo "‚ùå No se encontr√≥ MCPBridge.csproj"; \
		exit 1; \
	fi
	@echo "üì¶ Compilando a c√≥digo nativo (puede tardar 1-2 minutos)..."
	@dotnet publish $(MCP_BRIDGE).csproj -r linux-x64 -c Release -p:PublishAot=true -o $(OUT_DIR)/
	@if [ -f $(OUT_DIR)/$(MCP_BRIDGE) ]; then \
		mv $(OUT_DIR)/$(MCP_BRIDGE) $(MCP_BRIDGE_NATIVE); \
		chmod +x $(MCP_BRIDGE_NATIVE); \
		echo "‚úÖ Bridge nativo compilado: $(MCP_BRIDGE_NATIVE)"; \
	else \
		echo "‚ùå Error al compilar el bridge"; \
		exit 1; \
	fi

# Compilar m√≥dulo arch_mcp auto-contenido
arch_mcp: build_mcp_bridge
	@echo "üî® Compilando m√≥dulo arch_mcp..."
	@if [ ! -f $(MCP_BRIDGE_NATIVE) ]; then \
		echo "‚ùå Bridge nativo no encontrado. Ejecutando build_mcp_bridge..."; \
		make -f Makefile.mcp build_mcp_bridge; \
	fi
	
	# Compilar el ejecutable principal
	$(CC) $(CFLAGS) -DMODO_ARCH_MCP \
		$(INCLUDES) -Imodulos/arch_mcp \
		-o $(OUT_DIR)/gpt_arch_mcp $(MAIN_MCP) $(COMMON_SRCS) $(API_SRCS) $(MCP_CLIENT_SRCS) modulos/arch_mcp/executor.c
	
	# Crear estructura auto-contenida del m√≥dulo
	@echo "üì¶ Creando m√≥dulo arch_mcp auto-contenido..."
	@mkdir -p $(OUT_DIR)/arch_mcp/api
	@mkdir -p $(OUT_DIR)/arch_mcp/modulos/arch_mcp
	
	# Copiar archivos necesarios
	@cp $(OUT_DIR)/gpt_arch_mcp $(OUT_DIR)/arch_mcp/
	@cp $(MCP_BRIDGE_NATIVE) $(OUT_DIR)/arch_mcp/
	@cp api/config.txt.example $(OUT_DIR)/arch_mcp/api/
	@cp -r modulos/arch_mcp/ $(OUT_DIR)/arch_mcp/modulos/
	
	# Crear script de ejecuci√≥n
	@echo "#!/bin/bash" > $(OUT_DIR)/arch_mcp/run.sh
	@echo "cd \"\$(dirname \"\$0\")\"" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "# Verificar dependencias" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "echo 'üîç Verificando dependencias...'" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "which jq >/dev/null || (echo '‚ùå Instala jq: sudo apt install jq'; exit 1)" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "which curl >/dev/null || (echo '‚ùå Instala curl: sudo apt install curl'; exit 1)" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "# Verificar configuraci√≥n API" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "if [ ! -f api/config.txt ]; then" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "  echo '‚ö†Ô∏è  Configura tu API key:'" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "  echo '  cp api/config.txt.example api/config.txt'" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "  echo '  nano api/config.txt  # Agrega tu OpenAI API key'" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "  exit 1" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "fi" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "# Ejecutar asistente" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "echo 'üöÄ Lanzando GPT Terminal Assistant con MCP...'" >> $(OUT_DIR)/arch_mcp/run.sh
	@echo "./gpt_arch_mcp \"\$@\"" >> $(OUT_DIR)/arch_mcp/run.sh
	@chmod +x $(OUT_DIR)/arch_mcp/run.sh
	
	# Crear README para el m√≥dulo
	@echo "# üöÄ GPT Arch Linux Assistant con MCP" > $(OUT_DIR)/arch_mcp/README.md
	@echo "" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "M√≥dulo auto-contenido con todas las dependencias incluidas." >> $(OUT_DIR)/arch_mcp/README.md
	@echo "" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "## Configuraci√≥n r√°pida:" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "\`\`\`bash" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "# 1. Configurar API key" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "cp api/config.txt.example api/config.txt" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "nano api/config.txt  # Agregar tu OpenAI API key" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "# 2. Ejecutar" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "./run.sh" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "\`\`\`" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "## Archivos incluidos:" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "- \`gpt_arch_mcp\` - Ejecutable principal" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "- \`MCPBridge_native\` - Bridge MCP (sin dependencias .NET)" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "- \`api/config.txt.example\` - Plantilla de configuraci√≥n" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "- \`modulos/arch_mcp/\` - Configuraci√≥n del m√≥dulo" >> $(OUT_DIR)/arch_mcp/README.md
	@echo "- \`run.sh\` - Script de ejecuci√≥n" >> $(OUT_DIR)/arch_mcp/README.md
	
	@echo "‚úÖ M√≥dulo arch_mcp compilado y empaquetado"
	@echo "üìÅ Ubicaci√≥n: $(OUT_DIR)/arch_mcp/"
	@echo "üöÄ Para usar: cd $(OUT_DIR)/arch_mcp && ./run.sh"

# Probar el bridge MCP
test_mcp:
	@echo "üîç Probando MCP Bridge..."
	@if [ -f $(MCP_BRIDGE_NATIVE) ]; then \
		echo "Probando comando get_system_info..."; \
		echo '{"Action":"get_system_info"}' | $(MCP_BRIDGE_NATIVE) | head -n 1 | grep -q "Success" \
		&& echo "‚úÖ Bridge MCP funciona correctamente" \
		|| echo "‚ùå Bridge MCP no responde correctamente"; \
	else \
		echo "‚ùå Bridge nativo no encontrado. Ejecuta 'make build_mcp_bridge'"; \
	fi

# Probar comando espec√≠fico
test_mcp_command:
	@echo "üîç Probando ejecuci√≥n de comando..."
	@if [ -f $(MCP_BRIDGE_NATIVE) ]; then \
		echo '{"Action":"execute_command","Data":"uname -a"}' | $(MCP_BRIDGE_NATIVE); \
	else \
		echo "‚ùå Bridge nativo no encontrado"; \
	fi

# Verificar dependencias para MCP
check_mcp_deps:
	@echo "üîç Verificando dependencias MCP..."
	@which dotnet > /dev/null || (echo "‚ùå .NET no est√° instalado"; exit 1)
	@dotnet --version | grep -q "8.0" || (echo "‚ùå Se requiere .NET 8.0+"; exit 1)
	@echo "‚úÖ .NET $(shell dotnet --version) encontrado"
	@which gcc > /dev/null || (echo "‚ùå GCC no est√° instalado"; exit 1)
	@echo "‚úÖ GCC encontrado"
	@which jq > /dev/null || (echo "‚ùå jq no est√° instalado"; exit 1)
	@echo "‚úÖ jq encontrado"
	@which curl > /dev/null || (echo "‚ùå curl no est√° instalado"; exit 1)
	@echo "‚úÖ curl encontrado"
	@echo "‚úÖ Todas las dependencias est√°n disponibles"

# Limpiar archivos MCP
clean_mcp:
	@echo "üßπ Limpiando archivos MCP..."
	rm -f $(OUT_DIR)/gpt_arch_mcp
	rm -f $(MCP_BRIDGE_NATIVE)
	rm -f $(OUT_DIR)/mcp_client.o
	rm -rf bin/ obj/
	@echo "‚úÖ Archivos MCP limpiados"

# Crear distribuci√≥n binaria completa
create_binary_dist: arch_mcp
	@echo "üì¶ Creando distribuci√≥n binaria..."
	@mkdir -p dist/
	@cp $(OUT_DIR)/gpt_arch_mcp $(MCP_BRIDGE_NATIVE) dist/
	@cp -r api/ modulos/ dist/
	@cp README.md .gitignore dist/ 2>/dev/null || true
	@echo "#!/bin/bash" > dist/run.sh
	@echo "cd \"\$$(dirname \"\$$0\")\"" >> dist/run.sh
	@echo "echo 'üöÄ GPT Terminal Assistant - Binary Distribution'" >> dist/run.sh
	@echo "echo 'Verificando dependencias...'" >> dist/run.sh
	@echo "which jq >/dev/null || (echo '‚ùå Instala jq: sudo apt install jq'; exit 1)" >> dist/run.sh
	@echo "which curl >/dev/null || (echo '‚ùå Instala curl: sudo apt install curl'; exit 1)" >> dist/run.sh
	@echo "if [ ! -f api/config.txt ]; then" >> dist/run.sh
	@echo "  echo '‚ö†Ô∏è  Configura tu API key:'" >> dist/run.sh
	@echo "  echo '  cp api/config.txt.example api/config.txt'" >> dist/run.sh
	@echo "  echo '  nano api/config.txt  # Agrega tu OpenAI API key'" >> dist/run.sh
	@echo "  exit 1" >> dist/run.sh
	@echo "fi" >> dist/run.sh
	@echo "echo '‚úÖ Lanzando asistente...'" >> dist/run.sh
	@echo "./gpt_arch_mcp \"\$$@\"" >> dist/run.sh
	@chmod +x dist/run.sh
	@tar -czf gpt-terminal-assistant-binary.tar.gz dist/
	@echo "‚úÖ Distribuci√≥n binaria creada: gpt-terminal-assistant-binary.tar.gz"
	@echo "üìã Contenido:"
	@echo "   - Binarios compilados sin dependencias .NET"
	@echo "   - Script de ejecuci√≥n autom√°tico (./run.sh)"
	@echo "   - Solo requiere: jq, curl en el sistema destino"
	@rm -rf dist/

# Ayuda espec√≠fica para MCP
help_mcp:
	@echo "üöÄ Comandos MCP disponibles:"
	@echo "  make build_mcp_bridge     - Compilar bridge nativo en $(OUT_DIR)/"
	@echo "  make arch_mcp             - Compilar asistente con MCP"
	@echo "  make test_mcp             - Probar bridge MCP"
	@echo "  make test_mcp_command     - Probar ejecuci√≥n de comando"
	@echo "  make check_mcp_deps       - Verificar dependencias"
	@echo "  make clean_mcp            - Limpiar archivos MCP"
	@echo "  make create_binary_dist   - Crear distribuci√≥n sin dependencias"
	@echo "  make help_mcp             - Mostrar esta ayuda"
	@echo ""
	@echo "üìÅ Archivos de salida:"
	@echo "  $(OUT_DIR)/gpt_arch_mcp       - Ejecutable principal"
	@echo "  $(OUT_DIR)/MCPBridge_native   - Bridge MCP (sin dependencias .NET)"
	@echo ""
	@echo "üéØ Para empezar:"
	@echo "  1. make check_mcp_deps"
	@echo "  2. make arch_mcp"
	@echo "  3. $(OUT_DIR)/gpt_arch_mcp"

.PHONY: build_mcp_bridge arch_mcp test_mcp test_mcp_command check_mcp_deps clean_mcp help_mcp create_binary_dist