CC = gcc
CFLAGS = -Wall -Wextra
INCLUDES = -I. -Icommon/includes -Iapi

# Directorio de salida para todos los binarios
OUT_DIR = out

# Descubrir todos los archivos .c en common
COMMON_SRCS := $(shell find common -name "*.c")
API_SRCS := api/openai.c
MODULES_DIR = modulos

# Detectar autom√°ticamente todos los m√≥dulos disponibles
AVAILABLE_MODULES := $(notdir $(wildcard $(MODULES_DIR)/*))

# Objetivo predeterminado
all: $(AVAILABLE_MODULES)

# Crear directorio de salida si no existe
$(OUT_DIR):
	@mkdir -p $(OUT_DIR)

# Regla din√°mica para compilar cualquier m√≥dulo
$(AVAILABLE_MODULES): $(OUT_DIR)
	@echo "üî® Compilando m√≥dulo: $@"
	$(CC) $(CFLAGS) -DMODO_$(shell echo $@ | tr a-z A-Z) \
		$(INCLUDES) -I$(MODULES_DIR)/$@ \
		-o $(OUT_DIR)/gpt_$@ main.c $(COMMON_SRCS) $(API_SRCS) $(MODULES_DIR)/$@/executor.c
	@echo "‚úÖ M√≥dulo $@ compilado como: $(OUT_DIR)/gpt_$@"

# Regla predeterminada
.DEFAULT: $(OUT_DIR)
	$(CC) $(CFLAGS) -DDEFAULT_CONFIG_FILE="default/config.ini" \
		$(INCLUDES) -o $(OUT_DIR)/gpt_default main.c $(COMMON_SRCS) $(API_SRCS)

# Listar m√≥dulos disponibles
list:
	@echo "üìã M√≥dulos disponibles para compilar:"
	@for module in $(AVAILABLE_MODULES); do \
		echo "  - $$module ‚Üí $(OUT_DIR)/gpt_$$module"; \
	done

# Verificar API key
test_api:
	@echo "üîç Probando conexi√≥n a la API de OpenAI..."
	@if [ ! -f api/config.txt ]; then \
		echo "‚ùå No se encontr√≥ api/config.txt. Crea uno basado en api/config.txt.example"; \
		exit 1; \
	fi
	@curl -s https://api.openai.com/v1/models -H "Authorization: Bearer $$(cat api/config.txt | grep API_KEY | cut -d= -f2)" | grep -q "gpt-3.5-turbo" && echo "‚úÖ API Key v√°lida y conexi√≥n establecida correctamente." || echo "‚ùå Error al conectar con la API. Verifica tu API Key y conexi√≥n a internet."

# Limpiar archivos compilados
clean:
	@echo "üßπ Limpiando archivos compilados..."
	rm -rf $(OUT_DIR)/
	rm -f req.json out.txt resp.json context.txt *.tar.gz
	@echo "‚úÖ Directorio $(OUT_DIR)/ eliminado"

# Crear script de ejecuci√≥n para facilidad de uso
create_runners: $(OUT_DIR)
	@echo "üìù Creando scripts de ejecuci√≥n..."
	@for exe in $(OUT_DIR)/gpt_*; do \
		if [ -f "$$exe" ]; then \
			name=$$(basename $$exe); \
			echo "#!/bin/bash" > $$name.sh; \
			echo "cd \"\$$(dirname \"\$$0\")\"" >> $$name.sh; \
			echo "./$(OUT_DIR)/$$name \"\$$@\"" >> $$name.sh; \
			chmod +x $$name.sh; \
			echo "  - $$name.sh ‚Üí $$exe"; \
		fi \
	done
	@echo "‚úÖ Scripts de ejecuci√≥n creados en el directorio ra√≠z"

help:
	@echo "üöÄ Comandos disponibles:"
	@echo "  make                - Compila todos los m√≥dulos en $(OUT_DIR)/"
	@echo "  make [modulo]       - Compila un m√≥dulo espec√≠fico (ej: make chat)"
	@echo "  make list           - Muestra los m√≥dulos disponibles"
	@echo "  make clean          - Elimina $(OUT_DIR)/ y archivos temporales"
	@echo "  make test_api       - Verifica si la API key es v√°lida"
	@echo "  make create_runners - Crea scripts .sh para ejecutar desde ra√≠z"
	@echo "  make help           - Muestra esta ayuda"
	@echo ""
	@echo "üìÅ Estructura de salida:"
	@echo "  $(OUT_DIR)/gpt_arch     - Versi√≥n original de Arch"
	@echo "  $(OUT_DIR)/gpt_arch_mcp - Versi√≥n Arch con MCP (requiere make arch_mcp)"
	@echo "  $(OUT_DIR)/gpt_chat     - M√≥dulo conversacional"
	@echo "  $(OUT_DIR)/gpt_creator  - Generador de proyectos"
	@echo ""
	@echo "üí° Para usar MCP: make -f Makefile.mcp arch_mcp"

.PHONY: all list clean help test_api create_runners $(AVAILABLE_MODULES)

# Incluir reglas MCP (opcional)
-include Makefile.mcp